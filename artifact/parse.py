#!/usr/bin/env python3

#
# usage: cat example.com | ./parse > example.com.json
#
# Here, example.com is a NetLog dump as generated by the collect script.  The
# resulting output is a json-encoded list where each item in turn lists:
# 1) Number of certificates in this certificate chain
# 2) Number of wire-bytes in this certificate chain
# 3) Number of presented SCTs
# 4) End-entity serial number
# 5) End-entity common name
#
# You may find Chromium's NetLog documentation helpful:
# https://www.chromium.org/developers/design-documents/network-stack/netlog
#
# For example, all NetLog events are enumerated here:
# https://cs.chromium.org/chromium/src/net/log/net_log_event_type_list.h
#

import sys
import json
import logging

from cryptography import x509
from cryptography.hazmat.backends import default_backend

log = logging.getLogger()

def main():
    data = read()
    if data is not None:
        json.dump(extract(parse(json.loads(data))), sys.stdout, indent=2)

def read():
    content = sys.stdin.read().rstrip()
    if len(content) == 0:
        content = None # no data available
    elif content[-1] == ",":
        content = content[:-1] + "]}" # fix broken json
    else:
        content += "]}" # fix broken json
    return content

def parse(netlog):
    estream = {}
    for e in netlog["events"]:
        eid = (e["source"]["id"], e["source"]["type"])
        if e["type"] == EventType.CERT_CT_COMPLIANCE_CHECKED:
            estream.setdefault(eid, {})
            estream[eid]["chain"] = e["params"]["certificate"]["certificates"]
        if e["type"] == EventType.SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED:
            estream.setdefault(eid, {})
            estream[eid]["sct"] = e["params"]["scts"]
    return uniq(estream)

def uniq(estream):
    sfos = []
    for eid,sfo in estream.items():
        if sfo not in sfos:
            sfos.append(sfo)
    return sfos

def extract(sfos):
    data = []
    for s in sfos:
        if "chain" not in s:
            log.warning("no chain event, skipping")
            continue
        if "sct" not in s:
            log.warning("no sct event, skipping")
            continue

        chain_len = len(s["chain"])
        chain_bytes = sum([ len(str(c)) for c in s["chain"] ])
        chain_scts = len(s["sct"])

        ee_pem = str(s["chain"][0]).encode("ascii")
        ee_cert = x509.load_pem_x509_certificate(ee_pem, default_backend())
        ee_serial = ee_cert.serial_number
        ee_cn = "unknown cn"
        for attribute in ee_cert.subject:
            if attribute.oid == x509.oid.NameOID.COMMON_NAME:
                ee_cn = attribute.value        

        data.append([chain_len, chain_bytes, chain_scts, ee_serial, ee_cn])
    return data

class EventType:
    SIGNED_CERTIFICATE_TIMESTAMPS_CHECKED = 71
    CERT_CT_COMPLIANCE_CHECKED = 72

if __name__ == "__main__":
    logging.basicConfig(
        format="[%(levelname)s] %(message)s",
        level = logging.DEBUG,
    )
    sys.exit(main())
